# Template file for 'cp2k'
pkgname=cp2k
version=2024.3
revision=1
#archs="i686 x86_64"
build_style=cmake
configure_args="-DCMAKE_INSTALL_PREFIX=/usr -DCP2K_DEBUG_MODE=OFF -DCP2K_USE_MPI_F08=ON -DCP2K_USE_LIBINT2=ON -DCP2K_USE_DFTD4=ON -DCP2K_USE_ELPA=ON -DCP2K_USE_LIBXC=ON -DCP2K_USE_LIBXSMM=OFF -DCP2K_USE_VORI=OFF -DCP2K_USE_SPGLIB=ON -DCMAKE_BUILD_TYPE=None"
#make_build_args=""
#make_install_args=""
hostmakedepends=""
makedepends="python3-devel pkg-config gcc-fortran libgfortran-devel openmpi openmpi-devel libopenmpi lapack-devel blas-devel libgomp-devel scalapack-devel dbcsr-devel elpa-devel libxc-devel fftw-devel spglib-devel dftd4-devel libint-devel"
depends="openmpi"
short_desc="Quantum chemistry and solid state physics software package"
maintainer="Tarasov Zakhar <werlait5@gmail.com>"
license="GPL-3.0-or-later"
homepage="https://github.com/cp2k/cp2k"
#changelog=""
distfiles="https://github.com/cp2k/cp2k/releases/download/v2024.3/cp2k-${version}.tar.bz2"
checksum=a6eeee773b6b1fb417def576e4049a89a08a0ed5feffcd7f0b33c7d7b48f19ba

do_configure() {
	local cmake_args=
        [ ! -d ${cmake_builddir:=build} ] && mkdir -p ${cmake_builddir}
        cd ${cmake_builddir}

        if [ -z "$CHROOT_READY" ]; then
                cat >bootstrap.cmake <<_EOF
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_VERSION 1)

SET(CMAKE_C_COMPILER   ${CC})
SET(CMAKE_CXX_COMPILER ${CXX})

SET(CMAKE_FIND_ROOT_PATH  "${XBPS_MASTERDIR}/usr;${XBPS_MASTERDIR}")

SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
_EOF
                configure_args+=" -DCMAKE_TOOLCHAIN_FILE=bootstrap.cmake"
        elif [ "$CROSS_BUILD" ]; then
                case "$XBPS_TARGET_MACHINE" in
                        x86_64*) _CMAKE_SYSTEM_PROCESSOR=x86_64 ;;
                        i686*) _CMAKE_SYSTEM_PROCESSOR=x86 ;;
                        aarch64*) _CMAKE_SYSTEM_PROCESSOR=aarch64 ;;
                        arm*) _CMAKE_SYSTEM_PROCESSOR=arm ;;
                        mips*) _CMAKE_SYSTEM_PROCESSOR=mips ;;
                        ppc64le*) _CMAKE_SYSTEM_PROCESSOR=ppc64le ;;
                        ppc64*) _CMAKE_SYSTEM_PROCESSOR=ppc64 ;;
                        ppcle*) _CMAKE_SYSTEM_PROCESSOR=ppcle ;;
                        ppc*) _CMAKE_SYSTEM_PROCESSOR=ppc ;;
                        riscv64*) _CMAKE_SYSTEM_PROCESSOR=riscv64 ;;
                        *) _CMAKE_SYSTEM_PROCESSOR=generic ;;
                esac
                cat > cross_${XBPS_CROSS_TRIPLET}.cmake <<_EOF
SET(CMAKE_SYSTEM_NAME Linux)
SET(CMAKE_SYSTEM_VERSION 1)

SET(CMAKE_C_COMPILER   ${CC})
SET(CMAKE_CXX_COMPILER ${CXX})
SET(Rust_CARGO_TARGET ${XBPS_CROSS_RUST_TARGET})
SET(CMAKE_CROSSCOMPILING TRUE)

SET(CMAKE_SYSTEM_PROCESSOR ${_CMAKE_SYSTEM_PROCESSOR})

SET(CMAKE_FIND_ROOT_PATH  "${XBPS_CROSS_BASE}/usr;${XBPS_CROSS_BASE}")

SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
_EOF
                cmake_args+=" -DCMAKE_TOOLCHAIN_FILE=${wrksrc}/${build_wrksrc}/${cmake_builddir}/cross_${XBPS_CROSS_TRIPLET}.cmake"
        fi
        cmake_args+=" -DCMAKE_INSTALL_PREFIX:PATH=/usr"
        cmake_args+=" -DCMAKE_BUILD_TYPE=None"
        cmake_args+=" -DCMAKE_INSTALL_LIBDIR:PATH=lib${XBPS_TARGET_WORDSIZE}"
        cmake_args+=" -DCMAKE_INSTALL_SYSCONFDIR:PATH=/etc"

        if [ "$CROSS_BUILD" ]; then
                cmake_args+=" -DQT_HOST_PATH=/usr"
                # QT_HOST_PATH isn't enough in my system,
                # which have binfmts support on and off
                cmake_args+=" -DQT_HOST_PATH_CMAKE_DIR=/usr/lib/cmake"
        fi

        if [[ $build_helper = *"qemu"* ]]; then
                echo "SET(CMAKE_CROSSCOMPILING_EMULATOR /usr/bin/qemu-${XBPS_TARGET_QEMU_MACHINE}-static)" \
                        >> cross_${XBPS_CROSS_TRIPLET}.cmake
        fi

        cmake_args+=" -DCMAKE_INSTALL_SBINDIR:PATH=bin"

        export CMAKE_GENERATOR="${CMAKE_GENERATOR:-Ninja}"
        # Remove -pipe: https://gitlab.kitware.com/cmake/cmake/issues/19590
        CFLAGS="${CFLAGS/ -pipe / }" CXXFLAGS="${CXXFLAGS/ -pipe / }" \
                cmake ${cmake_args} ${configure_args} \
                ${LIBS:+-DCMAKE_C_STANDARD_LIBRARIES="$LIBS"} \
                ${LIBS:+-DCMAKE_CXX_STANDARD_LIBRARIES="$LIBS"} \
                ${wrksrc}/${build_wrksrc}

        # Replace -isystem with -I
        if [ "$CMAKE_GENERATOR" = "Unix Makefiles" ]; then
                find . -name flags.make -exec sed -i -e 's/-isystem/-I/g' "{}" +
        elif [ "$CMAKE_GENERATOR" = Ninja ]; then
                sed -i -e 's/-isystem/-I/g' build.ninja
        fi
}

cp2k-devel_package() {
        depends="${sourcepkg}>=${version}_${revision}"
        short_desc+=" - development files"
        pkg_install() {
                vmove usr/include
                vmove usr/lib/cmake
                vmove "usr/lib/*.a"
                vmove "usr/lib/*.so"
                vmove usr/lib/pkgconfig
        }
}
